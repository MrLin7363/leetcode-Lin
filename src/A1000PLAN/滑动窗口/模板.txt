https://leetcode.cn/problems/subarray-product-less-than-k/solutions/1320871/jian-dan-yi-dong-xiang-xi-zhu-jie-shuang-jvy3/


    模板：
    1.定义左右指针
    2.指针起始位置为0；用右指针遍历整个数组，每次移动一次；
    3.移动过程中积累从左指针到右指针的乘积/和等条件
    4.如果不符合条件，则左指针右移，直到符合条件
    5.记录符合条件
    6.右指针右移
while (r < n) {
            // 计算当前乘积等(右指针)

            // 不符合条件，右移左指针 while/if

            // 符合条件->记录结果等

            // 右移右指针
        }

第一个模板：适用于需要使用 [变量/数组] 记录的情况
类似题目如 1004.最大连续1的个数 III   P713乘积小于K的子数组

class Solution {
    public int slidingWindow(int[] nums, int k) {
        //数组/字符串长度
        int n = nums.length;
        //双指针，表示当前遍历的区间[left, right]，闭区间
        int left = 0, right = 0;
        //定义变量统计 子数组/子区间 是否有效
        int sum = 0;
        //定义变量动态保存最大 求和/计数
        int res = 0;

        //右指针遍历到数组尾
        while (right < n) {
            //增加当前右指针对应的数值
            sum += nums[right];
            //当在该区间内 sum 超出定义范围
            while (sum > k) {
                //先将左指针指向的数值减去
                sum -= nums[left];
                //左指针右移
                left++;
            }
            //到 while 结束时，我们找到了一个符合题意要求的 子数组/子串
            res = Math.max(res, right - left + 1);
            //移动右指针，去探索下一个区间
            right++;
        }
        return res;
    }
}

第二个模板：适用于需要用 [哈希表] 记录的情况
类似题目诸如 567.字符串的排列、438.找到字符串中所有字母异位词
class Solution {
    public String slidingWindow(String s, String t) {
        //创建两个哈希表，分别记录 [需要的] 和 [加入的]
        Map<Character, Integer> need = new HashMap<>();
        Map<Character, Integer> map = new HashMap<>();

        //创建 [双指针] 和 [有效数量]
        int left = 0, right = 0;
        int valid = 0;

        //外层循环，供右指针遍历
        while(right < s.length()){
            //创建临时 c 字符，是移入 窗口 内的字符
            char c = s.charAt(right);

            //进行窗口一系列逻辑更新
            ...

            //判断左指针是否要右移即窗口收缩：有效数量足够满足条件
             /*  可能是规定的窗口大小超出了，可能是有效值数量达成了
             1.  while(valid == need.size())
             2.  while(right - left + 1 >= s1.length())
             */
             // 判断左侧窗口是否要收缩
            while(windows need shrink){
                // d 是要移除窗口的字符
                char d = s.charAt(left);
                // 左移窗口
                left++;

                //进行窗口一系列逻辑更新
                ...
            }

            //右指针右移
            right++;
        }
    }
}
