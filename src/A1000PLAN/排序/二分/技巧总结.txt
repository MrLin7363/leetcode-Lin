1.开闭区间,开闭区间也可能从[1,n]开始,看题目确定，有可能[0,n-1)这样，因为n-1已经能确定
一般而言，具体情况结合while判断当前区间是闭还是开
l=-1,r=n 是区间()

l=0,r=n 是区间[)

l=0,r=n-1 是区间[]

l=-1,r=n 是区间(]

2.while
while(l<r)
while(l<=r)
while(l+1<r)
都是由开闭区间决定，
比如 []里都是未确定的数，所以while(l<=r)
比如 [)，所以while(l<r) 时l还未确定, l=0,r=1   0位置还没确定
比如 (]，所以while(l+1<r) 时r还未确定  l=-1,r=1, 0位置还未确定

3.mid  mid偏左偏右不影响,主要是区间问题
 left + (right - left) / 2;   偶数偏左   int mid=(left+right)/2;(可能溢出)
 (left+right+1)/2; //偶数偏右

4.确定条件 l,r的变化
加入是[)  那么下一步检查 [left,mid)和[mid+1,right)

理解二分，请牢记区间的定义！区间内的数（下标）都是还未确定与 target 的大小关系的，有的是 < target，有的是 ≥ target；区间外的数（下标）都是确定与 target 的大小关系的。
对于本题（递增数组），区间左侧外面的都是 < target，区间右侧外面的都是 ≥ target。从这个定义可以知道，找到了 ≥ target 的数之后，要把这个数（下标）放在区间外面，而不是区间里面！
所以对于闭区间写法，当 nums【mid】 >= target 时，要把 mid 放在区间外面，代码就自然是 right = mid - 1 了

5. return  根据最后找到的位置确定
比如[) 找到最右边界时left=mid+1, 此时left位置不合法left==right结束循环， return right-1
比如[] 找最右边界left=mid+1, 此时left位置不合法，left==right时，还是继续一次,right=mid-1   return right

6.技巧
其他几种都可以互相转换
>=  找第一个>=x,假设最左边界数为x
>   比如找第一个>x 换算： >=(x+1)
<   比如找最后一个<x(最右边界) 换算就是 (>=x) -1
<=  比如找最后一个<=x(最右边界) 换算：(>=x+1)-1

7.「最大化最小值」或者「最小化最大值」就要想到二分答案，这是一个固定的套路

二分题目参考 灵茶山
https://leetcode.cn/problems/h-index-ii/solutions/2504326/tu-jie-yi-tu-zhang-wo-er-fen-da-an-si-ch-d15k/


8.红蓝标记法
如153
    红：最小值左侧
    蓝：最小值及其右侧， n-1其实已经确定
    [0,n-1) while (l<r) 左闭右开 找左边界模板