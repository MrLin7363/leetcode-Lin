1.判断环是否存在
快慢指针，会在环的某个地方相遇
2.找到环起始点
快慢指针,找到相遇点，然后slow=head,fast不变，再同步移动，再次相遇的点就是环初始点
3.如果存在环，如何判断环的长度呢？
方法是，快慢指针相遇后继续移动(在相遇点后开始移动),直到第二次相遇.两次相遇间的移动次数即为环的长度
4.寻找中间结点

找环模板：
    public boolean hasCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head; // 注意这里fast=head
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if (slow == fast) {
                return true;
            }
        }
        return false;
    }

找中间结点
    // 偶数链表返回左边的中间结点，返回左边的一般为找中间结点的题  -推荐
    public ListNode middleNode(ListNode head) {
        if (head == null) {
            return null;
        }
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
找中间节点
    // 偶数链表返回右边的中间结点 100 + 63
    private ListNode middleNode3(ListNode head) {
        ListNode slow = head, fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }