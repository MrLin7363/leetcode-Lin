回溯
https://lfool.github.io/LFool-Notes/algorithm/%E5%9B%9E%E6%BA%AF(DFS).html

排列组合子集
https://lfool.github.io/LFool-Notes/algorithm/%E6%8E%92%E5%88%97-%E7%BB%84%E5%90%88-%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98.html

岛屿问题
https://lfool.github.io/LFool-Notes/algorithm/%E7%A7%92%E6%9D%80%E6%89%80%E6%9C%89%E5%B2%9B%E5%B1%BF%E9%A2%98%E7%9B%AE(DFS).html


数组回溯

result = []
def backtrack(路径, 选择列表):
    if 满足结束条件:
        result.add(路径)
        return

    for 选择 in 选择列表:
        做选择
        backtrack(路径, 选择列表)
        撤销选择

图/二维回溯
    private int[] direction = new int[] {-1, 0, 1, 0, -1};

    private boolean[][] visited;


回溯模板总结 https://leetcode.cn/problems/subsets/solutions/229569/c-zong-jie-liao-hui-su-wen-ti-lei-xing-dai-ni-gao-/?envType=study-plan-v2&envId=top-100-liked
3.怎么样写回溯算法(从上而下，※代表难点，根据题目而变化)
①画出递归树，找到状态变量(回溯函数的参数)，这一步非常重要※
②根据题意，确立结束条件
③找准选择列表(与函数参数相关),与第一步紧密关联※
④判断是否需要剪枝
⑤作出选择，递归调用，进入下一层
⑥撤销选择
